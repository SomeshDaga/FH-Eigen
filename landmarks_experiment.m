% This script quantifies the MMSE-based landmark detection error rate
% between landmarks on high resolution images and the landmarks detected
% for super-resolved/bicubic interpolated images

addpath('Utilities');
addpath('Utilities/urlreadpost');

% Load the landmarks detected for the high-resolution images
dataset_info = load('landmarks_cafe.mat');

%parameters
par.nFactor = 5;
par.psf =   fspecial('gauss', 7, 1.6); % The simulated PSF
par.alpha = 0.05;   %parameter in second condition
par.k = 50; % No of eigenfaces to use

% Perform a 80-20 split for the dataset
% and create 5 folds such that all data gets a chance to be included
% in both training and testing sets
dataset = cvpartition(length(dataset_info.data), 'KFold', 5);

average_mouth_mmse = [0 0];
average_left_eye_mmse = [0 0];
average_left_eyebrow_mmse = [0 0];
average_right_eye_mmse = [0 0];
average_right_eyebrow_mmse = [0 0];
average_nose_mmse = [0 0];
num_imgs = 0;

for fold=1:dataset.NumTestSets
    train_idxs = find(dataset.training(fold));
    test_idxs = find(dataset.test(fold));
    [El, Eh, mY, mX, Y, X, Vl, Dh] = Get_PCA_Train(par, train_idxs, dataset_info.data);
    for i=1:length(test_idxs)
        num_imgs = num_imgs + 1;
        test_image = dataset_info.data(test_idxs(i)).file;
        [bicubic, sr, hr] = SR_by_PCA(par, test_image, El, Eh, mY, mX, X, Vl, Dh );

        % Extract landmarks from the bicubic and super-resolved images
        landmarks_bicubic = get_landmarks(bicubic, false);
        landmarks_sr = get_landmarks(sr, false);
        
        % Define the landmarks for each face component
        % 1) Mouth
        mouth_features = ["mouth_left_corner",...
                  "mouth_upper_lip_left_contour1",...
                  "mouth_upper_lip_left_contour2",...
                  "mouth_upper_lip_left_contour3",...
                  "mouth_upper_lip_top",...
                  "mouth_upper_lip_bottom",...
                  "mouth_upper_lip_right_contour3",...
                  "mouth_upper_lip_right_contour2",...
                  "mouth_upper_lip_right_contour1",...
                  "mouth_right_corner",...
                  "mouth_lower_lip_right_contour1",...
                  "mouth_lower_lip_right_contour2",...
                  "mouth_lower_lip_right_contour3",...
                  "mouth_lower_lip_top",...
                  "mouth_lower_lip_bottom",...
                  "mouth_lower_lip_left_contour3",...
                  "mouth_lower_lip_left_contour2",...
                  "mouth_lower_lip_left_contour1"];
        
        % 2) Left eye
        left_eye_features = ["left_eye_left_corner",...
                     "left_eye_upper_left_quarter",...
                     "left_eye_top",...
                     "left_eye_upper_right_quarter",...
                     "left_eye_right_corner",...
                     "left_eye_lower_right_quarter",...
                     "left_eye_bottom",...
                     "left_eye_lower_left_quarter",...
                     "left_eye_center",...
                     "left_eye_pupil"];
                 
        % 3) Left eyebrow
        left_eyebrow_features = ["left_eyebrow_left_corner",...
                         "left_eyebrow_upper_left_quarter",...
                         "left_eyebrow_upper_middle",...
                         "left_eyebrow_upper_right_quarter",...
                         "left_eyebrow_right_corner",...
                         "left_eyebrow_lower_right_quarter",...
                         "left_eyebrow_lower_middle",...
                         "left_eyebrow_lower_left_quarter"];
                     
        % 4) Right eye
        right_eye_features = ["right_eye_left_corner",...
                      "right_eye_upper_left_quarter",...
                      "right_eye_top",...
                      "right_eye_upper_right_quarter",...
                      "right_eye_right_corner",...
                      "right_eye_lower_right_quarter",...
                      "right_eye_bottom",...
                      "right_eye_lower_left_quarter",...
                      "right_eye_center",...
                      "right_eye_pupil"];
                  
        % 5) Right eyebrow
        right_eyebrow_features = ["right_eyebrow_left_corner",...
                          "right_eyebrow_upper_left_quarter",...
                          "right_eyebrow_upper_middle",...
                          "right_eyebrow_upper_right_quarter",...
                          "right_eyebrow_right_corner",...
                          "right_eyebrow_lower_right_quarter",...
                          "right_eyebrow_lower_middle",...
                          "right_eyebrow_lower_left_quarter"];
                      
        % 6) Nose
        nose_features = ["nose_contour_left3",...
                 "nose_contour_left2",...
                 "nose_contour_left1",...
                 "nose_left",...
                 "nose_contour_lower_middle",...
                 "nose_right",...
                 "nose_contour_right1",...
                 "nose_contour_right2",...
                 "nose_contour_right3",...
                 "nose_tip"];

%         fprintf("Mouth - SR MMSE: %f, Bicubic MMSE: %f",...
%                 hr_sr_mouth_mmse, hr_bicubic_mouth_mmse);
        mouth_sr_mmse = get_landmarks_mmse(mouth_features,...
                                           dataset_info.data(test_idxs(i)).faces.landmark,...
                                           landmarks_sr.faces.landmark);
        mouth_bicubic_mmse = get_landmarks_mmse(mouth_features,...
                                                dataset_info.data(test_idxs(i)).faces.landmark,...
                                                landmarks_bicubic.faces.landmark);
        left_eye_sr_mmse = get_landmarks_mmse(left_eye_features,...
                                              dataset_info.data(test_idxs(i)).faces.landmark,...
                                              landmarks_sr.faces.landmark);
        left_eye_bicubic_mmse = get_landmarks_mmse(left_eye_features,...
                                                   dataset_info.data(test_idxs(i)).faces.landmark,...
                                                   landmarks_bicubic.faces.landmark);
        left_eyebrow_sr_mmse = get_landmarks_mmse(left_eyebrow_features,...
                                                  dataset_info.data(test_idxs(i)).faces.landmark,...
                                                  landmarks_sr.faces.landmark);
        left_eyebrow_bicubic_mmse = get_landmarks_mmse(left_eyebrow_features,...
                                                       dataset_info.data(test_idxs(i)).faces.landmark,...
                                                       landmarks_bicubic.faces.landmark);
        
        right_eye_sr_mmse = get_landmarks_mmse(right_eye_features,...
                                               dataset_info.data(test_idxs(i)).faces.landmark,...
                                               landmarks_sr.faces.landmark);
        right_eye_bicubic_mmse = get_landmarks_mmse(right_eye_features,...
                                                    dataset_info.data(test_idxs(i)).faces.landmark,...
                                                    landmarks_bicubic.faces.landmark);
        right_eyebrow_sr_mmse = get_landmarks_mmse(right_eyebrow_features,...
                                                   dataset_info.data(test_idxs(i)).faces.landmark,...
                                                   landmarks_sr.faces.landmark);
        right_eyebrow_bicubic_mmse = get_landmarks_mmse(left_eyebrow_features,...
                                                        dataset_info.data(test_idxs(i)).faces.landmark,...
                                                        landmarks_bicubic.faces.landmark);
        nose_sr_mmse = get_landmarks_mmse(nose_features,...
                                          dataset_info.data(test_idxs(i)).faces.landmark,...
                                          landmarks_sr.faces.landmark);
        nose_bicubic_mmse = get_landmarks_mmse(nose_features,...
                                               dataset_info.data(test_idxs(i)).faces.landmark,...
                                               landmarks_bicubic.faces.landmark);
                                           
        average_mouth_mmse = average_mouth_mmse + [mouth_sr_mmse mouth_bicubic_mmse];
        average_left_eye_mmse = average_left_eye_mmse + [left_eye_sr_mmse left_eye_bicubic_mmse];
        average_left_eyebrow_mmse = average_left_eyebrow_mmse + [left_eyebrow_sr_mmse left_eyebrow_bicubic_mmse];
        average_right_eye_mmse = average_right_eye_mmse + [right_eye_sr_mmse right_eye_bicubic_mmse];
        average_right_eyebrow_mmse = average_right_eyebrow_mmse + [right_eyebrow_sr_mmse right_eyebrow_bicubic_mmse];
        average_nose_mmse = average_nose_mmse + [nose_sr_mmse nose_bicubic_mmse];
    end
end

average_mouth_mmse = average_mouth_mmse / num_imgs;
average_left_eye_mmse = average_left_eye_mmse / num_imgs;
average_left_eyebrow_mmse = average_left_eyebrow_mmse / num_imgs;
average_right_eye_mmse = average_right_eye_mmse / num_imgs;
average_right_eyebrow_mmse = average_right_eyebrow_mmse / num_imgs;
average_nose_mmse = average_nose_mmse / num_imgs;

fprintf("Mouth - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n",...
        average_mouth_mmse(1), average_mouth_mmse(2));
fprintf("Left eye - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n",...
        average_left_eye_mmse(1), average_left_eye_mmse(2));
fprintf("Left eyebrow - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n",...
        average_left_eyebrow_mmse(1), average_left_eyebrow_mmse(2));
fprintf("Right eye - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n",...
        average_right_eye_mmse(1), average_right_eye_mmse(2));
fprintf("Right eyebrow - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n",...
        average_right_eyebrow_mmse(1), average_right_eyebrow_mmse(2));
fprintf("Nose - Avg SR MMSE: %f, Avg Bicubic MMSE: %f\n\n",...
        average_nose_mmse(1), average_nose_mmse(2));

